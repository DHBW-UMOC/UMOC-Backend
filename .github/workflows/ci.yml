name: CI Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  check-code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint

    - name: Run pylint with score check
      run: |
        echo "[MESSAGES CONTROL]" > .pylintrc
        echo "disable=trailing-whitespace,missing-module-docstring,too-few-public-methods,missing-function-docstring,C0103,missing-class-docstring,R0911,W0718,E0401,R0917,R0913" >> .pylintrc
        echo "max-line-length=140" >> .pylintrc

        echo "Running pylint on ./src..."
        OUTPUT=$(pylint src/ --rcfile=.pylintrc || true)

        echo "$OUTPUT"

        SCORE=$(echo "$OUTPUT" | grep "Your code has been rated" | sed -E 's/.*rated at ([0-9\.]+)\/.*/\1/')
        SCORE=${SCORE:-0}

        echo "🔎 Pylint score: $SCORE"
        REQUIRED=8.0
        COMP=$(awk -v s="$SCORE" -v r="$REQUIRED" 'BEGIN {print (s<r) ? "fail" : "pass"}')

        if [ "$COMP" = "fail" ]; then
          echo "❌ Pylint score $SCORE is below required $REQUIRED"
          exit 1
        else
          echo "✅ Pylint score $SCORE is acceptable"
        fi

  build-and-test:
    needs: check-code-quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-flask

    - name: Setup Python path
      run: |
        echo "PYTHONPATH=${PYTHONPATH}:$(pwd):$(pwd)/src" >> $GITHUB_ENV

    - name: Verify compatibility patch 
      run: |
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import test.compatibility_patch; print('Compatibility patch loaded successfully')"

    - name: Run tests using pytest.ini configuration
      run: |
        # Using the options from pytest.ini
        python -m pytest test/ --cov=src --import-mode=importlib --disable-warnings
  mesure_metrics:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install metric tools
        run: |
          python -m pip install --upgrade pip
          pip install radon lizard locust pytest pytest-benchmark

      - name: Run Cyclomatic Complexity Analysis
        run: |
          echo "=== Cyclomatic Complexity Analysis ==="
          radon cc src/ -nc

      - name: Run Response for Class (RFC) Analysis
        run: |
          echo "=== Response for Class (RFC) Analysis ==="
          lizard src/ --CCN 35 --length 1200 --arguments 15

  publish:
    if: github.ref == 'refs/heads/main'
    needs:
       - build-and-test
       - check-code-quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub (oder GitHub Container Registry)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          echo "${{ secrets.DOCKER_PAD }}" | docker login ghcr.io -u max-rohrhirsch --password-stdin
          
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            -t ghcr.io/max-rohrhirsch/umoc-backend:latest . \
            --push
